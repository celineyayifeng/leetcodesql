1. Write an SQL query to rank the scores. The ranking should be calculated according to the following rules:
  The scores should be ranked from the highest to the lowest.
  If there is a tie between two scores, both should have the same ranking.
  After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.

Solution: 
select score, dense_rank() over (order by score DESC) as 'rank'
from Scores

2. Write an SQL query to find all numbers that appear at least three times consecutively.

Solution: 
select distinct num as ConsecutiveNums from
(select num, lag(num) over (order by id) as 'previous_num',
lead(num) over (order by id) as 'next_num'
from logs) as t
where num = previous_num
and previous_num = next_num;

3. Write an SQL query to find the employees who earn more than their managers.

Solution: 
SELECT e1.name as Employee 
FROM Employee as e1
JOIN Employee as e2 on e1.managerID = e2.id
WHERE e1.salary > e2.salary

4. Write an SQL query to report all the duplicate emails.

Solution: 
SELECT email as Email
FROM Person 
GROUP BY email
HAVING count(email) > 1

5. Write an SQL query to report all customers who never order anything.

Solution: 
select name as Customers 
from Customers as c
left join Orders as o on c.id = o.customerID 
where customerID is NULL 

6. Write an SQL query to find employees who have the highest salary in each of the departments.


Solution: 
select e.name as Employee, e.salary as Salary, d.name as Department
from (select *, max(salary) over (partition by departmentId) as max_sal from Employee) e
join department d on e.departmentId = d.id 
where e.salary=max_sal

7. employees who have the top 3 highest salary in each department 

Solution: 
select d.name as Department, e.name as Employee, e.salary as Salary 
from (
    select *, dense_rank() over (partition by departmentId order by salary desc) as top3salary 
      from employee) e 
join Department d on e.departmentId = d.id 
where top3salary <= 3

8. delete duplicate

DELETE p1
FROM Person p1, Person p2
WHERE p1.Email = p2.Email AND
p1.Id > p2.Id

9. find all dates' Id with higher temperatures compared to its previous dates

select a.id 
from Weather a, Weather b 
WHERE datediff(a.recordDate, b.recordDate)=1 and a.temperature > b.temperature

10. Write an SQL query to report the first login date for each player.

select player_id, min(event_date) as first_login
from activity 
group by player_id

11. place largest number of orders

select customer_number from orders
group by customer_number
order by count(*) desc limit 1

12. swap m and f

update Salary
set sex = case
    when sex = "m" then "f"
    else "m"
end


